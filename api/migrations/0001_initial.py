# Generated by Django 4.0.2 on 2022-02-26 10:54

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('contact_no', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(regex='^(\\+\\d{1,3})?,?\\s?\\d{8,13}')], verbose_name='Mobile Number')),
                ('address', models.CharField(blank=True, max_length=1024, null=True)),
                ('pincode', models.CharField(blank=True, max_length=6, null=True)),
                ('user_type', models.CharField(blank=True, choices=[('1', 'Public'), ('2', 'Municipality')], default=1, max_length=12, null=True)),
                ('user_image', models.ImageField(blank=True, null=True, upload_to='')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Complaint_Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=100)),
                ('category_desc', models.CharField(blank=True, max_length=1000, null=True)),
                ('posting_date', models.DateField(auto_now_add=True)),
                ('updation_date', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(max_length=40, unique=True)),
                ('posting_date', models.DateField(auto_now_add=True)),
                ('country_desc', models.CharField(blank=True, max_length=1000, null=True)),
                ('updation_date', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state_name', models.CharField(max_length=40, unique=True)),
                ('state_desc', models.CharField(blank=True, max_length=1000, null=True)),
                ('posting_date', models.DateField(auto_now_add=True)),
                ('updation_date', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('municipality_name', models.CharField(max_length=100)),
                ('municipality_address', models.CharField(max_length=500)),
                ('municipality_desc', models.TextField(blank=True, null=True)),
                ('contact_no', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(regex='^(\\+\\d{1,3})?,?\\s?\\d{8,13}')], verbose_name='Contact Number')),
                ('pincode', models.CharField(blank=True, max_length=6, null=True)),
                ('posting_date', models.DateField(auto_now_add=True)),
                ('updation_date', models.DateField(auto_now=True)),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.state')),
            ],
        ),
        migrations.CreateModel(
            name='Complaint_Sub_Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_category_name', models.CharField(max_length=100)),
                ('sub_category_desc', models.CharField(blank=True, max_length=1000, null=True)),
                ('posting_date', models.DateField(auto_now_add=True)),
                ('updation_date', models.DateField(auto_now=True)),
                ('category_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.complaint_category')),
            ],
        ),
        migrations.CreateModel(
            name='Complain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complaint_subject', models.CharField(blank=True, max_length=500, null=True)),
                ('complaint_details', models.TextField(blank=True)),
                ('complaint_file', models.ImageField(blank=True, null=True, upload_to='')),
                ('complaint_status', models.CharField(choices=[('1', 'Pending'), ('2', 'Processing'), ('2', 'Closed')], default=1, max_length=10)),
                ('complaint_date', models.DateField(auto_now_add=True)),
                ('updation_date', models.DateField(auto_now=True)),
                ('complaint_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.complaint_category')),
                ('complaint_sub_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.complaint_sub_category')),
                ('municipality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.municipality')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.state')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='userdata',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.country'),
        ),
        migrations.AddField(
            model_name='userdata',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userdata',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.state'),
        ),
        migrations.AddField(
            model_name='userdata',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
